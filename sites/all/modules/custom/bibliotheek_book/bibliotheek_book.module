<?php

include("workingDays.php");




/*
 * Implements hook_form()
 */



/*
 * Implements hook_form_alter()
 */

function bibliotheek_book_form_alter(&$form, &$form_state, $form_id) {



    if ($form_id == 'book_node_form'){

        $destination = 'node/add/book';
        unset($form['actions']['preview']);

        $form['actions']['cancel'] = array(
            '#markup' => l(t('Cancel'), $destination),
            '#weight' => 20,
        );


        $form['actions']['submit']['#submit'][] = 'bibliotheek_book_custom_submit';
        $form['#validate'][] = 'bibliotheek_book_form_validate';

    }


    if ($form_id == 'search_block_form') {
        $form['search_block_form'] = array(
            '#type' => 'textfield',
            '#title' => 'Search',
            '#title_display' => 'invisible',
            '#size' => 15,
            '#default_value' => '',
            '#attributes'=> array(
              'title' => t('Enter the terms you wish to search for')
            ),
            '#autocomplete_path' => 'example/autocomplete',

        );


    }


}

function bibliotheek_book_custom_submit($form, &$form_state) {

    $messages = drupal_get_messages('status');
    drupal_set_message(t("The book has been registered."));

}

function bibliotheek_book_form_validate($form, &$form_state) {

        if(form_get_errors()) {
        drupal_set_message(t('Please fill in all mandatory fields'),'error');
}

}

/**
 * Implementation of hook_menu().
 */

function bibliotheek_book_menu() {

    $items['node/add/book/%/%'] = array(
        'page callback' => 'bibliotheek_book_add',
        'page arguments' => array(3,4),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),

    );

    $items['node/return/book/%/%'] = array(
        'page callback' => 'bibliotheek_book_return',
        'page arguments' => array(3,4),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );

    $items['example/autocomplete'] = array(
        'page callback' => 'bibliotheek_book_title_autocomplete',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK
    );


    return $items;
}

function bibliotheek_book_add($nid,$uid) {

    $node = node_load($nid);
    $user = user_load($uid);
    $field_language = 'und';

    if (isset($node)) {
        if (count($user->field_borrowed_books[$field_language]) < 3) {

            $lenddate = new DateTime();
            $date = new DateTime();
            $duedate = $date->modify('+3 week');
            $node->field_lend_date[$field_language][0]['value'] = $lenddate->format('Y-m-d H:i:s');
            $node->field_lend_date[$field_language][0]['value2'] = $duedate->format('Y-m-d H:i:s');


            $node->field_borrower['und'][0]['user'] = $user;
            $node->field_borrower['und'][0]['uid'] = arg(4);

            bibliotheek_book_set_available($node);




            end($user->field_borrowed_books[$field_language]);
            $key = key($user->field_borrowed_books[$field_language]);
            $key++;
            $user->field_borrowed_books[$field_language][$key]['nid'] = arg(3);

            node_save($node);
            user_save($user);


            drupal_set_message(t("Book has been added"));
        }else{
            drupal_set_message(t("A user can only lend a maximum of 3 books"),"error");
        }

        drupal_goto("http://localhost/bibliotheek/user/5");
    }
}


function bibliotheek_book_return($nid,$uid) {

    $node = node_load($nid);
    $user = user_load($uid);

    if(isset($node)){

        unset($node->field_borrower);
        $node->field_borrower = array();
        bibliotheek_book_set_available($node);


        for($i = 0; $i < count($user->field_borrowed_books['und']) ; $i++){

            if($user->field_borrowed_books['und'][$i]['nid'] == $node->nid) {
                    unset($user->field_borrowed_books['und'][$i]);

            }

        }

        $user->field_borrowed_book['und'] = array();

        node_save($node);
        user_save($user);

        drupal_set_message(t("Book has been returned"));
        drupal_goto("http://localhost/bibliotheek/user/5");



    }





}


/*
 * Implement hook_node_view()
 */

function bibliotheek_book_node_view($node) {


    bibliotheek_book_set_available($node);


}


function bibliotheek_book_set_available($node) {

    if(empty($node->field_borrower)){
        $node->field_available['und'][0]['value'] = 1;
        unset($node->field_lend_date);
        $node->field_lend_date = array();
    } else{
        $node->field_available['und'][0]['value'] = 0;
    }
}

function bibliotheek_book_views_pre_render(&$view) {



    if ($view->name == "enter_a_new_book") {

            $view->field['nothing']->options['alter']['text'] = arg(1);
        }


    if ($view->name == "users_borrowed_books") {

        $results = $view->result;

        foreach ($results as $result) {

            $overdue = bibliotheek_calculate_days_overdue($result->nid);
           $fine = bibliotheek_calculate_fine($result->nid);

            $view->field['nothing']->options['alter']['text'] = $overdue . "  Days";
            $view->field['nothing_1']->options['alter']['text'] = "â‚¬ ".$fine;

        }
        $view->field['nothing_2']->options['alter']['text'] = arg(1);
    }



}


function bibliotheek_calculate_fine($nid) {

    $getnode = node_load($nid);

    $date = $getnode->field_lend_date['und'][0]['value2'];
    $duedate = new DateTime($date);
    $today = new DateTime('2015-05-2');
    $nrdays = getWorkingDays($duedate,$today);
    $fine = 0;
    if($duedate < $today){
        $fine = $nrdays * 0.30;
    }

    return $fine;
}

function bibliotheek_calculate_days_overdue($nid) {
    $getnode = node_load($nid);

    $overdue = 0;

    $date = $getnode->field_lend_date['und'][0]['value2'];
    $duedate = new DateTime($date);
    $today = new DateTime('2015-05-2');

    $nrdays = getWorkingDays($duedate,$today);

    if($duedate < $today) {
        $overdue = $nrdays;
    }

    return $overdue;
}


function bibliotheek_book_title_autocomplete($string) {


    $matches = array();
    $query = db_select('node')
        ->fields('node', array('title'))
        ->condition('node.title', '%' . db_like($string) . '%', 'LIKE');



    foreach ($query->execute() as $row) {

        $matches[$row->title] = $row->title;

    }

    if(empty($matches)){
        $matches[""] = "No book found";
    }

    drupal_json_output($matches);

}


