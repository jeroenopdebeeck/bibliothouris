<?php




/*
 * Implements hook_form_alter()
 */

function bibliotheek_book_form_alter(&$form, &$form_state, $form_id) {



    if ($form_id == 'book_node_form'){

        $destination = 'node/add/book';
        unset($form['actions']['preview']);

        $form['actions']['cancel'] = array(
            '#markup' => l(t('Cancel'), $destination),
            '#weight' => 20,
        );


        $form['actions']['submit']['#submit'][] = 'bibliotheek_book_custom_submit';
        $form['#validate'][] = 'bibliotheek_book_form_validate';

    }


}

function bibliotheek_book_custom_submit($form, &$form_state) {

    $messages = drupal_get_messages('status');
    drupal_set_message(t("The book has been registered."));

}

function bibliotheek_book_form_validate($form, &$form_state) {

    if ($form_state['values']['title'] == ''
        || $form_state['values']['field_isbn'][LANGUAGE_NONE][0]['value'] == ''
        || $form_state['values']['field_last_name'][LANGUAGE_NONE][0]['value'] == ''
        || $form_state['values']['field_category'][LANGUAGE_NONE][0]['value'] == NULL ){
        drupal_set_message(t('Please fill in all mandatory fields.'),'error');
    }



}

/**
 * Implementation of hook_menu().
 */

function bibliotheek_book_menu() {

    $items['node/get/ajax/%/%'] = array(
        'page callback' => 'bibliotheek_book_ajax_get_ajax',
        'page arguments' => array(4),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),

    );

    $items['node/return/book/%/%'] = array(
        'page callback' => 'bibliotheek_book_return',
        'page arguments' => array(4),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );


    return $items;
}

function bibliotheek_book_ajax_get_ajax() {

    $node = node_load(arg(3));
    $user = user_load(arg(4));


    if (isset($node)) {

        $field_language = field_language('node', $node, 'field_lend_date');
        $lenddate = new DateTime();
        $date = new DateTime();
        $duedate = $date->modify('+3 week');
        $node->field_lend_date[$field_language][0]['value'] = $lenddate->format('Y-m-d H:i:s');
        $node->field_lend_date[$field_language][0]['value2'] = $duedate->format('Y-m-d H:i:s');

        if(count($user->field_borrowed_books[$field_language]) < 3) {

            $node->field_borrower['und'][0]['user'] = $user;
            $node->field_borrower['und'][0]['uid'] = arg(4);

            setAvailable($node);

            node_save($node);
        }

        end($user->field_borrowed_books[$field_language]);
        $key = key($user->field_borrowed_books[$field_language]);
        $key++;
        $user->field_borrowed_books[$field_language][$key]['nid'] = arg(3);
        user_save($user);


    }


}



function bibliotheek_book_return() {

    $node = node_load(arg(3));
    $user = user_load(arg(4));

    if(isset($node)){

        unset($node->field_borrower);
        $node->field_borrower = array();
        setAvailable($node);


        for($i = 0; $i < count($user->field_borrowed_books['und']) ; $i++){

            if($user->field_borrowed_books['und'][$i]['nid'] == $node->nid) {
                    unset($user->field_borrowed_books['und'][$i]);

            }

        }

        node_save($node);
        user_save($user);




    }





}


/*
 * Implement hook_node_view()
 */

function bibliotheek_book_node_view($node){


    setAvailable($node);


}


function setAvailable($node){

    if(empty($node->field_borrower)){
        $node->field_available['und'][0]['value'] = 1;
        unset($node->field_lend_date);
        $node->field_lend_date = array();
    } else{
        $node->field_available['und'][0]['value'] = 0;
    }





}


